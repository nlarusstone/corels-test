diff --git a/Makefile b/Makefile
index 16f3d9c..3111161 100644
--- a/Makefile
+++ b/Makefile
@@ -13,8 +13,8 @@ INCLUDES = -I. -I/opt/local/include
 # Put this here so we can specify something like -DGMP to switch between
 # representations.
 CC = cc
-CFLAGS = -g $(INCLUDES) -DGMP -Wall
-LIBS = -L/opt/local/lib  -lc -lgsl -lgmp
+CFLAGS = -g $(INCLUDES) -DGMP -Wall -I/usr/local/include
+LIBS = -L/usr/local/lib -L/opt/local/lib  -lc -lgsl -lgmp
 
 $(TARGET) : $(OBJECTS)
 	$(CC) -o $(TARGET) $(OBJECTS) $(LIBS)
diff --git a/predict.c b/predict.c
index 3fb95b7..e183cb3 100644
--- a/predict.c
+++ b/predict.c
@@ -42,11 +42,12 @@ get_accuracy(ruleset_t *rs,
 	int j, nwrong = 0;
 	VECTOR v0;
 
-	if (debug > 10) {
+	if (debug >= 10) {
 		for (j = 0; j < rs->n_rules; j++)
 			printf("theta[%d] = %f\n", j, theta[j]);
 	}
 
+    int tp = 0, tn = 0, fp = 0, fn = 0, fpj = 0, fnj = 0;
 	rule_vinit(rs->n_samples, &v0);
 	for (j = 0; j < rs->n_rules; j++) {
 		int n1_correct = 0, n0_correct = 0;
@@ -55,26 +56,38 @@ get_accuracy(ruleset_t *rs,
 			rule_vand(v0, rs->rules[j].captures,
 			    test_labels[1].truthtable, rs->n_samples,
 			    &n1_correct);
-			nwrong += rs->rules[j].ncaptured - n1_correct;
+			tp += n1_correct;
+            fpj = rs->rules[j].ncaptured - n1_correct;
+			fp += fpj;
+			nwrong += fpj;
 		} else {
 			rule_vand(v0, rs->rules[j].captures,
 			    test_labels[0].truthtable, rs->n_samples,
 			    &n0_correct);
-			nwrong += rs->rules[j].ncaptured - n0_correct;
+			tn += n0_correct;
+			fnj = rs->rules[j].ncaptured - n0_correct;
+			fn += fnj;
+			nwrong += fnj;
 		}
-		if (debug > 10)
+		if (debug >= 10)
 			printf("rules[%d] captures %d%s %d, n1=%d,%s %.6f\n",
 			    j, rs->rules[j].ncaptured,
 			    "samples, correct n0=", n0_correct, n1_correct,
 			    "test Probability=", (n0_correct + n1_correct) * 1.0
 			    / rs->rules[j].ncaptured);
 	}
-	if (debug > 10) {
+	if (debug >= 10) {
 		printf("ntotal = %d,  n0 = %d,  n1 = %d\n",
 		    rs->n_samples, test_labels[0].support,
 		    test_labels[1].support);
 		printf("#wrong predictions = %d,  #total predictions = %d\n",
 		    nwrong, rs->n_samples);
+	    double accuracy, tpr, fpr;
+		accuracy = 1.0 - ((float)nwrong / rs->n_samples);
+		tpr = (float)tp / (tp + fn);
+		fpr = (float)fp / (fp + tn);
+		printf("accuracy,leaves,train_accuracy,ntest,TP,FP,FN,TN,TPR,FPR\n");
+		printf("[%1.5f, %d, %1.5f, %d, %d, %d, %d, %d, %1.5f, %1.5f],\n", accuracy, rs->n_rules, 0., rs->n_samples, tp, fp, fn, tn, tpr, fpr);
 	}
 
 	return 1.0 - ((float)nwrong / rs->n_samples);
